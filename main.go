package main

import (
	"PricePulse/connect"
	"PricePulse/parsingPrice"
	"PricePulse/products"
	"PricePulse/telegramBot"
	"database/sql"
	"fmt"
	"github.com/joho/godotenv"
	"log"
	"os"
	"sync"
)

type ParseResult struct {
	Product products.Product
	Price   float64
	Error   error
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª app.log
	logFile, err := os.OpenFile("app.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	defer func() { //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É defer logFile.Close()
		if err := logFile.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
		}
	}()
	log.SetOutput(logFile)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	if err := godotenv.Load(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: ", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	chatID, bot, err := telegramBot.InitBot()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: ", err)
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
	db, err := connect.ConnectDB()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ", err)
	}

	//–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	defer func() { //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É defer db.Close()
		if err := db.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	}()

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	results := make(chan ParseResult, len(products.Products))
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
	for _, product := range products.Products {
		wg.Add(1)
		go func(p products.Product) {
			defer wg.Done()
			price, err := parsingPrice.AllParsing(p.Url)
			results <- ParseResult{Product: p, Price: price, Error: err}
		}(product)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
	go func() {
		wg.Wait()
		close(results)
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	for result := range results {
		if result.Error != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–ª—è %s: %v\n", result.Product.Name, result.Error)
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if err := updateProductAndPrice(db, result.Product, result.Price); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s: %v", result.Product.Name, err)
			continue
		}

		log.Printf("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ %s: %.2f", result.Product.Name, result.Price)

		if result.Price < result.Product.PriceThreshold {
			msg := fmt.Sprintf("üö® –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ %.2f –≤ –ø—Ä–æ–¥—É–∫—Ç–µ %s!\n%s", result.Price, result.Product.Name, result.Product.Url)
			if _, err := bot.Send(chatID, msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è %s: %v", result.Product.Name, err)
			} else {
				log.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è %s: %s", result.Product.Name, msg)
			}
		}
	}
	log.Println()
}

func updateProductAndPrice(db *sql.DB, product products.Product, price float64) error {
	// 1. –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ products
	var productID int
	err := db.QueryRow(`
		INSERT INTO products (product_name, product_url) 
		VALUES ($1, $2)
		ON CONFLICT (product_url) DO UPDATE 
		SET product_name = EXCLUDED.product_name 
		RETURNING product_id
	`, product.Name, product.Url).Scan(&productID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å products –¥–ª—è %s: %w", product.Name, err)
	}

	// 2. –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ prices
	_, err = db.Exec(`
		INSERT INTO prices (product_id, price) 
		VALUES ($1, $2)
		ON CONFLICT (product_id, date) DO UPDATE 
		SET price = EXCLUDED.price
	`, productID, price)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å prices –¥–ª—è %s: %w", product.Name, err)
	}

	return nil
}
